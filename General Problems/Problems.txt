

472. Concatenated Words

class Solution {
public:
    vector<string> findAllConcatenatedWordsInADict(vector<string>& words) {
        unordered_set<string> st(words.begin(), words.end());
        vector<string> ans;
        for(auto w : words){
            vector<bool> taken(w.size());
            if(rec(w, 0, taken, st)){
                ans.push_back(w);
            }
        }
        return ans;
    }
    bool rec(string &w, int sz, vector<bool>&taken, unordered_set<string>&st){
        if(sz == w.size()) return true;
        if(taken[sz]) return false;
        taken[sz] = true;
        for(int i = w.size()-(sz == 0 ? 1 : 0); i > sz; i--){
            if(st.count(w.substr(sz, i-sz)) && rec(w, i, taken, st)){
                return true;
            }
        }
        return false;
    }
};


352. Data Stream as Disjoint Intervals

class SummaryRanges {
public:
    map<int, int> m;
    SummaryRanges() {
        
    }
    
    void addNum(int val) {
        if(m.count(val)) return;
        m[val] = val;
        int mn = val, mx = val;
        if (m.count(val - 1)) mn = m[val-1];
        if (m.count(val + 1)) mx = m[val + 1];
        m[mn] = mx;
        m[mx] = mn;
    }
    
    vector<vector<int>> getIntervals() {
        vector<vector<int> > ans;
        auto it = m.begin();
        while(it != m.end()) {
            ans.push_back({it->first, it->second});
            it = m.upper_bound(it->second);
        }
        return ans;
    }
};

/**
 * Your SummaryRanges object will be instantiated and called as such:
 * SummaryRanges* obj = new SummaryRanges();
 * obj->addNum(val);
 * vector<vector<int>> param_2 = obj->getIntervals();
 */


 460. LFU Cache

 class LFUCache {
public:
  int cap, id;
  unordered_map<int, tuple<int,int,int>> table;         
  set<tuple<int,int,int>>st;                            
  
  LFUCache(int capacity) {
    cap = capacity, id = 0;
  }
    
  int get(int key) {
    if(table.count(key)){
      auto [freq, old_id, val] = table[key];
      st.erase({freq, old_id, key});
      st.insert({++freq, ++id, key});
      table[key] = {freq, id, val};
      return val;
    }
    return -1;
  }
    
  void put(int key, int value) {
    if(cap == 0) return;
    if(table.count(key)){
      auto [freq, old_id, val] = table[key];
      st.erase({freq, old_id, key});
      st.insert({++freq, ++id, key});
      table[key] = {freq, id, value};
    }
    else {
      if(cap == table.size()){
        auto [freq, old_id, old_key] = *st.begin();
        st.erase(*st.begin());
        table.erase(old_key);
      }
      st.insert({1, ++id, key});
      table[key] = {1, id, value};
    }
  }
};

/**
 * Your LFUCache object will be instantiated and called as such:
 * LFUCache* obj = new LFUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */


1137. N-th Tribonacci Number

class Solution {
public:
    int tribonacci(int n) {
        int a = 0, b = 1, c = 1, d;
        if(n == 0)return a;
        if(n == 1)return b;
        if(n == 2)return c;
        for(int i = 3; i <= n; i++){
            d = a+b+c;
            a = b;
            b = c;
            c = d;
        }
        return d;
    }
};


1626. Best Team With No Conflicts

class Solution {
public:
    int bestTeamScore(vector<int>& scores, vector<int>& ages) {
        vector<pair<int, int>> vec;
        int n = scores.size();
        for(int i = 0; i < n; i++){
            vec.push_back({ages[i], scores[i]});
        }
        sort(vec.begin(), vec.end());
        vector<vector<int>> dp(n, vector<int>(n, -1));
        return rec(vec, dp, -1, 0);
    }
    int rec(vector<pair<int, int>>&vec, vector<vector<int>>&dp, int prev, int i){
        if(i >= vec.size()) return 0;
        if(dp[prev+1][i] != -1) return dp[prev+1][i];
        if(prev == -1 || vec[i].second >= vec[prev].second){
            return dp[prev+1][i] = max(rec(vec, dp, prev, i+1), vec[i].second+rec(vec, dp, i, i+1));
        }
        return dp[prev+1][i] = rec(vec, dp, prev, i+1);
    }
};