

472. Concatenated Words

class Solution {
public:
    vector<string> findAllConcatenatedWordsInADict(vector<string>& words) {
        unordered_set<string> st(words.begin(), words.end());
        vector<string> ans;
        for(auto w : words){
            vector<bool> taken(w.size());
            if(rec(w, 0, taken, st)){
                ans.push_back(w);
            }
        }
        return ans;
    }
    bool rec(string &w, int sz, vector<bool>&taken, unordered_set<string>&st){
        if(sz == w.size()) return true;
        if(taken[sz]) return false;
        taken[sz] = true;
        for(int i = w.size()-(sz == 0 ? 1 : 0); i > sz; i--){
            if(st.count(w.substr(sz, i-sz)) && rec(w, i, taken, st)){
                return true;
            }
        }
        return false;
    }
};


352. Data Stream as Disjoint Intervals

class SummaryRanges {
public:
    map<int, int> m;
    SummaryRanges() {
        
    }
    
    void addNum(int val) {
        if(m.count(val)) return;
        m[val] = val;
        int mn = val, mx = val;
        if (m.count(val - 1)) mn = m[val-1];
        if (m.count(val + 1)) mx = m[val + 1];
        m[mn] = mx;
        m[mx] = mn;
    }
    
    vector<vector<int>> getIntervals() {
        vector<vector<int> > ans;
        auto it = m.begin();
        while(it != m.end()) {
            ans.push_back({it->first, it->second});
            it = m.upper_bound(it->second);
        }
        return ans;
    }
};

/**
 * Your SummaryRanges object will be instantiated and called as such:
 * SummaryRanges* obj = new SummaryRanges();
 * obj->addNum(val);
 * vector<vector<int>> param_2 = obj->getIntervals();
 */