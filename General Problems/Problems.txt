

472. Concatenated Words

class Solution {
public:
    vector<string> findAllConcatenatedWordsInADict(vector<string>& words) {
        unordered_set<string> st(words.begin(), words.end());
        vector<string> ans;
        for(auto w : words){
            vector<bool> taken(w.size());
            if(rec(w, 0, taken, st)){
                ans.push_back(w);
            }
        }
        return ans;
    }
    bool rec(string &w, int sz, vector<bool>&taken, unordered_set<string>&st){
        if(sz == w.size()) return true;
        if(taken[sz]) return false;
        taken[sz] = true;
        for(int i = w.size()-(sz == 0 ? 1 : 0); i > sz; i--){
            if(st.count(w.substr(sz, i-sz)) && rec(w, i, taken, st)){
                return true;
            }
        }
        return false;
    }
};


352. Data Stream as Disjoint Intervals

class SummaryRanges {
public:
    map<int, int> m;
    SummaryRanges() {
        
    }
    
    void addNum(int val) {
        if(m.count(val)) return;
        m[val] = val;
        int mn = val, mx = val;
        if (m.count(val - 1)) mn = m[val-1];
        if (m.count(val + 1)) mx = m[val + 1];
        m[mn] = mx;
        m[mx] = mn;
    }
    
    vector<vector<int>> getIntervals() {
        vector<vector<int> > ans;
        auto it = m.begin();
        while(it != m.end()) {
            ans.push_back({it->first, it->second});
            it = m.upper_bound(it->second);
        }
        return ans;
    }
};

/**
 * Your SummaryRanges object will be instantiated and called as such:
 * SummaryRanges* obj = new SummaryRanges();
 * obj->addNum(val);
 * vector<vector<int>> param_2 = obj->getIntervals();
 */


 460. LFU Cache

 class LFUCache {
public:
  int cap, id;
  unordered_map<int, tuple<int,int,int>> table;         
  set<tuple<int,int,int>>st;                            
  
  LFUCache(int capacity) {
    cap = capacity, id = 0;
  }
    
  int get(int key) {
    if(table.count(key)){
      auto [freq, old_id, val] = table[key];
      st.erase({freq, old_id, key});
      st.insert({++freq, ++id, key});
      table[key] = {freq, id, val};
      return val;
    }
    return -1;
  }
    
  void put(int key, int value) {
    if(cap == 0) return;
    if(table.count(key)){
      auto [freq, old_id, val] = table[key];
      st.erase({freq, old_id, key});
      st.insert({++freq, ++id, key});
      table[key] = {freq, id, value};
    }
    else {
      if(cap == table.size()){
        auto [freq, old_id, old_key] = *st.begin();
        st.erase(*st.begin());
        table.erase(old_key);
      }
      st.insert({1, ++id, key});
      table[key] = {1, id, value};
    }
  }
};

/**
 * Your LFUCache object will be instantiated and called as such:
 * LFUCache* obj = new LFUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */


1137. N-th Tribonacci Number

class Solution {
public:
    int tribonacci(int n) {
        int a = 0, b = 1, c = 1, d;
        if(n == 0)return a;
        if(n == 1)return b;
        if(n == 2)return c;
        for(int i = 3; i <= n; i++){
            d = a+b+c;
            a = b;
            b = c;
            c = d;
        }
        return d;
    }
};


1626. Best Team With No Conflicts

class Solution {
public:
    int bestTeamScore(vector<int>& scores, vector<int>& ages) {
        vector<pair<int, int>> vec;
        int n = scores.size();
        for(int i = 0; i < n; i++){
            vec.push_back({ages[i], scores[i]});
        }
        sort(vec.begin(), vec.end());
        vector<vector<int>> dp(n, vector<int>(n, -1));
        return rec(vec, dp, -1, 0);
    }
    int rec(vector<pair<int, int>>&vec, vector<vector<int>>&dp, int prev, int i){
        if(i >= vec.size()) return 0;
        if(dp[prev+1][i] != -1) return dp[prev+1][i];
        if(prev == -1 || vec[i].second >= vec[prev].second){
            return dp[prev+1][i] = max(rec(vec, dp, prev, i+1), vec[i].second+rec(vec, dp, i, i+1));
        }
        return dp[prev+1][i] = rec(vec, dp, prev, i+1);
    }
};

 
1071. Greatest Common Divisor of Strings

class Solution {
public:
    string gcdOfStrings(string str1, string str2) {
        return (str1+str2 == str2+str1) ? str1.substr(0, gcd(str1.size(), str2.size())) : "";
    }
};



953. Verifying an Alien Dictionary

class Solution {
public:
    bool isAlienSorted(vector<string>& words, string order) {
        unordered_map<char, int> mp;
        for(int i = 0; i < order.size(); i++) mp[order[i]] = i;
        for(int i = 0; i < words.size()-1; i++){
            for(int j = 0; j < words[i].size(); j++){
                if(j >= words[i+1].size()) return false;
                if(words[i][j] != words[i+1][j]){
                    if(mp[words[i][j]] > mp[words[i+1][j]]) return false;
                    else break;
                }
            }
        }
        return true;
    }
};


6. Zigzag Conversion

class Solution {
public:
    string convert(string s, int numrows) {
        if(numrows == 1) return s;
        string ans = "";
        int n = s.size(), sz = 2*(numrows-1);
        for(int i = 0; i < numrows; i++){
            int indx = i;
            while(indx < n){
                ans += s[indx];
                if(i != 0 && i != numrows-1){
                    int space = sz-2*i;
                    int sindx = indx+space;
                    if(sindx < n) ans += s[sindx];
                }
                indx += sz;
            }
        }
        return ans;
    }
};


567. Permutation in String

class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        int n1 = s1.size(), n2 = s2.size();
        if(n1 > n2)return false;
        unordered_map<char, int> m1, m2;
        for(int i = 0; i < n1; i++){
            m1[s1[i]]++; m2[s2[i]]++;
        }    
        if(m1 == m2)return true;
        for(int i = n1; i < n2; i++){
            m2[s2[i]]++; m2[s2[i-n1]]--;
            if(m2[s2[i-n1]] == 0)m2.erase(s2[i-n1]);
            if(m1 == m2)return true;
        }
        return false;
    }
};


438. Find All Anagrams in a String

class Solution {
public:
    vector<int> findAnagrams(string s, string &p) {
        int m = s.size(), n = p.size();
        vector<int> ans;
        if(n > m)return ans;
        vector<int> vp(26, 0), vs(26, 0);
        for(int i = 0; i < n; i++)vp[p[i]-'a']++;
        for(int i = 0; i < n; i++)vs[s[i]-'a']++;
        if(vp == vs)ans.push_back(0);
        for(int i = 1; i < m-n+1; i++){
            vs[s[i+n-1]-'a']++; vs[s[i-1]-'a']--;
            if(vs == vp)ans.push_back(i);
        }
        return ans;
    }
};

1470. Shuffle the Array

class Solution {
public:
    vector<int> shuffle(vector<int>& nums, int n) {
        vector<int> ans(2*n);
        for(int i = 0, indx = 0; i < 2*n; i+=2, indx++){
            ans[i] = nums[indx], ans[i+1] = nums[n+indx];
        }
        return ans;
    }
};

904. Fruit Into Baskets

class Solution {
public:
    int totalFruit(vector<int>& s) {
        int n = s.size(), k = 2;
        if(n*k == 0)return 0;
        int l = 0, r = 0, ans = 1;
        map<int, int> mp;
        while(r < n){
            mp[s[r]] = r; r++;
            if(mp.size() == k+1){
                int l_indx = INT_MAX;
                for(pair<int, int> i : mp)l_indx = min(l_indx, i.second);
                mp.erase(s[l_indx]);
                l = l_indx+1;
            }
            ans = max(ans, r - l);
        }
        return ans;
    }
};



45. Jump Game II

class Solution {
public:
    int jump(vector<int>& nums) {
        int n = nums.size(), ans = 0, mx = 0, step = 0;
        for(int i = 0; i < n-1; i++){
            mx = max(mx, i+nums[i]);
            if(i == step)ans++, step = mx;
        }
        return ans;
    }
};


2306. Naming a Company

class Solution {
public:
    long long distinctNames(vector<string>& ideas) {
        unordered_set<string> us[26];
        for(auto& idea : ideas) us[idea[0]-'a'].insert(idea.substr(1));
        long long ans = 0;
        for(int i = 0; i < 25; i++){
            for(int j = i+1; j < 26; j++){
                int mutual = 0;
                for(auto &idea1 : us[i]){
                    if(us[j].count(idea1)){
                        mutual++;
                    }
                }
                ans += 2LL*(us[i].size()-mutual)*(us[j].size()-mutual);
            }
        }
        return ans;
    }
};



1162. As Far from Land as Possible

class Solution {
public:
    int maxDistance(vector<vector<int>>& grid) {
        vector<pair<int, int>> vec;
        int n = grid.size();
        bool zero = false;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j]) vec.push_back({i, j});
                else zero = true;
            }
        }
        if(vec.size() == 0 || !zero) return -1;
        int ans = 0;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] == 0){
                    int tmp = INT_MAX;
                    for(auto k : vec){
                        int dist = abs(k.first - i) + abs(k.second-j);
                        tmp = min(tmp, dist);
                    }
                    ans = max(ans, tmp);
                }
            }
        }
        return ans;
    }
};