

472. Concatenated Words

class Solution {
public:
    vector<string> findAllConcatenatedWordsInADict(vector<string>& words) {
        unordered_set<string> st(words.begin(), words.end());
        vector<string> ans;
        for(auto w : words){
            vector<bool> taken(w.size());
            if(rec(w, 0, taken, st)){
                ans.push_back(w);
            }
        }
        return ans;
    }
    bool rec(string &w, int sz, vector<bool>&taken, unordered_set<string>&st){
        if(sz == w.size()) return true;
        if(taken[sz]) return false;
        taken[sz] = true;
        for(int i = w.size()-(sz == 0 ? 1 : 0); i > sz; i--){
            if(st.count(w.substr(sz, i-sz)) && rec(w, i, taken, st)){
                return true;
            }
        }
        return false;
    }
};


352. Data Stream as Disjoint Intervals

class SummaryRanges {
public:
    map<int, int> m;
    SummaryRanges() {
        
    }
    
    void addNum(int val) {
        if(m.count(val)) return;
        m[val] = val;
        int mn = val, mx = val;
        if (m.count(val - 1)) mn = m[val-1];
        if (m.count(val + 1)) mx = m[val + 1];
        m[mn] = mx;
        m[mx] = mn;
    }
    
    vector<vector<int>> getIntervals() {
        vector<vector<int> > ans;
        auto it = m.begin();
        while(it != m.end()) {
            ans.push_back({it->first, it->second});
            it = m.upper_bound(it->second);
        }
        return ans;
    }
};

/**
 * Your SummaryRanges object will be instantiated and called as such:
 * SummaryRanges* obj = new SummaryRanges();
 * obj->addNum(val);
 * vector<vector<int>> param_2 = obj->getIntervals();
 */


 460. LFU Cache

 class LFUCache {
public:
  int cap, id;
  unordered_map<int, tuple<int,int,int>> table;         
  set<tuple<int,int,int>>st;                            
  
  LFUCache(int capacity) {
    cap = capacity, id = 0;
  }
    
  int get(int key) {
    if(table.count(key)){
      auto [freq, old_id, val] = table[key];
      st.erase({freq, old_id, key});
      st.insert({++freq, ++id, key});
      table[key] = {freq, id, val};
      return val;
    }
    return -1;
  }
    
  void put(int key, int value) {
    if(cap == 0) return;
    if(table.count(key)){
      auto [freq, old_id, val] = table[key];
      st.erase({freq, old_id, key});
      st.insert({++freq, ++id, key});
      table[key] = {freq, id, value};
    }
    else {
      if(cap == table.size()){
        auto [freq, old_id, old_key] = *st.begin();
        st.erase(*st.begin());
        table.erase(old_key);
      }
      st.insert({1, ++id, key});
      table[key] = {1, id, value};
    }
  }
};

/**
 * Your LFUCache object will be instantiated and called as such:
 * LFUCache* obj = new LFUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */


1137. N-th Tribonacci Number

class Solution {
public:
    int tribonacci(int n) {
        int a = 0, b = 1, c = 1, d;
        if(n == 0)return a;
        if(n == 1)return b;
        if(n == 2)return c;
        for(int i = 3; i <= n; i++){
            d = a+b+c;
            a = b;
            b = c;
            c = d;
        }
        return d;
    }
};


1626. Best Team With No Conflicts

class Solution {
public:
    int bestTeamScore(vector<int>& scores, vector<int>& ages) {
        vector<pair<int, int>> vec;
        int n = scores.size();
        for(int i = 0; i < n; i++){
            vec.push_back({ages[i], scores[i]});
        }
        sort(vec.begin(), vec.end());
        vector<vector<int>> dp(n, vector<int>(n, -1));
        return rec(vec, dp, -1, 0);
    }
    int rec(vector<pair<int, int>>&vec, vector<vector<int>>&dp, int prev, int i){
        if(i >= vec.size()) return 0;
        if(dp[prev+1][i] != -1) return dp[prev+1][i];
        if(prev == -1 || vec[i].second >= vec[prev].second){
            return dp[prev+1][i] = max(rec(vec, dp, prev, i+1), vec[i].second+rec(vec, dp, i, i+1));
        }
        return dp[prev+1][i] = rec(vec, dp, prev, i+1);
    }
};

 
1071. Greatest Common Divisor of Strings

class Solution {
public:
    string gcdOfStrings(string str1, string str2) {
        return (str1+str2 == str2+str1) ? str1.substr(0, gcd(str1.size(), str2.size())) : "";
    }
};



953. Verifying an Alien Dictionary

class Solution {
public:
    bool isAlienSorted(vector<string>& words, string order) {
        unordered_map<char, int> mp;
        for(int i = 0; i < order.size(); i++) mp[order[i]] = i;
        for(int i = 0; i < words.size()-1; i++){
            for(int j = 0; j < words[i].size(); j++){
                if(j >= words[i+1].size()) return false;
                if(words[i][j] != words[i+1][j]){
                    if(mp[words[i][j]] > mp[words[i+1][j]]) return false;
                    else break;
                }
            }
        }
        return true;
    }
};


6. Zigzag Conversion

class Solution {
public:
    string convert(string s, int numrows) {
        if(numrows == 1) return s;
        string ans = "";
        int n = s.size(), sz = 2*(numrows-1);
        for(int i = 0; i < numrows; i++){
            int indx = i;
            while(indx < n){
                ans += s[indx];
                if(i != 0 && i != numrows-1){
                    int space = sz-2*i;
                    int sindx = indx+space;
                    if(sindx < n) ans += s[sindx];
                }
                indx += sz;
            }
        }
        return ans;
    }
};


567. Permutation in String

class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        int n1 = s1.size(), n2 = s2.size();
        if(n1 > n2)return false;
        unordered_map<char, int> m1, m2;
        for(int i = 0; i < n1; i++){
            m1[s1[i]]++; m2[s2[i]]++;
        }    
        if(m1 == m2)return true;
        for(int i = n1; i < n2; i++){
            m2[s2[i]]++; m2[s2[i-n1]]--;
            if(m2[s2[i-n1]] == 0)m2.erase(s2[i-n1]);
            if(m1 == m2)return true;
        }
        return false;
    }
};


438. Find All Anagrams in a String

class Solution {
public:
    vector<int> findAnagrams(string s, string &p) {
        int m = s.size(), n = p.size();
        vector<int> ans;
        if(n > m)return ans;
        vector<int> vp(26, 0), vs(26, 0);
        for(int i = 0; i < n; i++)vp[p[i]-'a']++;
        for(int i = 0; i < n; i++)vs[s[i]-'a']++;
        if(vp == vs)ans.push_back(0);
        for(int i = 1; i < m-n+1; i++){
            vs[s[i+n-1]-'a']++; vs[s[i-1]-'a']--;
            if(vs == vp)ans.push_back(i);
        }
        return ans;
    }
};

1470. Shuffle the Array

class Solution {
public:
    vector<int> shuffle(vector<int>& nums, int n) {
        vector<int> ans(2*n);
        for(int i = 0, indx = 0; i < 2*n; i+=2, indx++){
            ans[i] = nums[indx], ans[i+1] = nums[n+indx];
        }
        return ans;
    }
};

904. Fruit Into Baskets

class Solution {
public:
    int totalFruit(vector<int>& s) {
        int n = s.size(), k = 2;
        if(n*k == 0)return 0;
        int l = 0, r = 0, ans = 1;
        map<int, int> mp;
        while(r < n){
            mp[s[r]] = r; r++;
            if(mp.size() == k+1){
                int l_indx = INT_MAX;
                for(pair<int, int> i : mp)l_indx = min(l_indx, i.second);
                mp.erase(s[l_indx]);
                l = l_indx+1;
            }
            ans = max(ans, r - l);
        }
        return ans;
    }
};



45. Jump Game II

class Solution {
public:
    int jump(vector<int>& nums) {
        int n = nums.size(), ans = 0, mx = 0, step = 0;
        for(int i = 0; i < n-1; i++){
            mx = max(mx, i+nums[i]);
            if(i == step)ans++, step = mx;
        }
        return ans;
    }
};


2306. Naming a Company

class Solution {
public:
    long long distinctNames(vector<string>& ideas) {
        unordered_set<string> us[26];
        for(auto& idea : ideas) us[idea[0]-'a'].insert(idea.substr(1));
        long long ans = 0;
        for(int i = 0; i < 25; i++){
            for(int j = i+1; j < 26; j++){
                int mutual = 0;
                for(auto &idea1 : us[i]){
                    if(us[j].count(idea1)){
                        mutual++;
                    }
                }
                ans += 2LL*(us[i].size()-mutual)*(us[j].size()-mutual);
            }
        }
        return ans;
    }
};



1162. As Far from Land as Possible

class Solution {
public:
    int maxDistance(vector<vector<int>>& grid) {
        vector<pair<int, int>> vec;
        int n = grid.size();
        bool zero = false;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j]) vec.push_back({i, j});
                else zero = true;
            }
        }
        if(vec.size() == 0 || !zero) return -1;
        int ans = 0;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] == 0){
                    int tmp = INT_MAX;
                    for(auto k : vec){
                        int dist = abs(k.first - i) + abs(k.second-j);
                        tmp = min(tmp, dist);
                    }
                    ans = max(ans, tmp);
                }
            }
        }
        return ans;
    }
};


1129. Shortest Path with Alternating Colors

class Solution {
public:
    typedef pair<int, int> pr;
    vector<int> shortestAlternatingPaths(int n, vector<vector<int>>& redEdges, vector<vector<int>>& blueEdges) {
        vector<vector<pr>> graph(n);
        for(auto r : redEdges) graph[r[0]].push_back({r[1], 0});
        for(auto b : blueEdges) graph[b[0]].push_back({b[1], 1});
        vector<vector<int>> vcost(n, vector<int>(2, -1));
        queue<pr> q;
        q.push({0, 0}); q.push({0, 1});
        vcost[0] = {0, 0};
        while(!q.empty()){
            auto [i, c1] = q.front(); q.pop();
            for(auto [j, c2] : graph[i]){
                if(vcost[j][c2] != -1 || c1 == c2)continue;
                vcost[j][c2] = 1 + vcost[i][c1];
                q.push({j, c2});
            }
        }
        vector<int> ans;
        for(auto& v : vcost){
            if(v[1] == -1 || (v[0] < v[1] && v[0] != -1)) v[1] = v[0];
            ans.push_back(v[1]);
        }
        return ans;
    }
};

2477. Minimum Fuel Cost to Report to the Capital

class Solution {
public:
    long long ans;
    long long minimumFuelCost(vector<vector<int>>& roads, int seats) {
        int n = roads.size()+1;
        vector<vector<int>> graph(n);
        for(auto r : roads){
            graph[r[0]].push_back(r[1]);
            graph[r[1]].push_back(r[0]);
        }
        rec(graph, seats, 0, -1);
        return ans;
    }
    long long rec(vector<vector<int>> &graph, int &seats, int u, int parent){
        int curr = 1;
        for(auto v : graph[u]){
            if(v != parent){
                curr += rec(graph, seats, v, u);
            }
        }
        if(u != 0){
            ans += ceil((double)curr/seats);
        }
        return curr;
    }
    
};

1523. Count Odd Numbers in an Interval Range

class Solution {
public:
    int countOdds(int low, int high) {
        int ans = (high-low)/2;
        if((low&1) || (high&1)) ans++;
        return ans;
    }
};


67. Add Binary

class Solution {
public:
    string addBinary(string a, string b) {
        string res;
        int i = a.length() - 1;
        int j = b.length() - 1;
        int carry = 0;
        while(i >= 0 || j >= 0){
            int sum = carry;
            if(i >= 0) sum += a[i--] - '0';
            if(j >= 0) sum += b[j--] - '0';
            carry = sum > 1 ? 1 : 0;
            res += to_string(sum % 2);
        }
        if(carry) res += to_string(carry);
        reverse(res.begin(), res.end());
        return res;
    }
};



989. Add to Array-Form of Integer

class Solution {
public:
    vector<int> addToArrayForm(vector<int>& num, int k) {
        int i = num.size()-1;
        int rem = 0;
        while(i >= 0 && k > 0){
            rem += (num[i]+k%10);
            if(rem < 10){
                num[i] = rem;
                rem = 0;
            } else{
                num[i] = rem%10;
                if(rem == 10) rem = 1;
                else rem /= 10;
            }
            k /= 10;
            i--;
        }
        while(i >= 0){
            rem += num[i];
            if(rem < 10){
                num[i] = rem;
                rem = 0;
                break;
            }else{
                num[i] = rem%10;
                rem /= 10;
            }
            k /= 10;
            i--;
        }
        while(k){
            rem += k%10;
            if(rem < 10){
                num.insert(num.begin(), rem%10);
                rem = 0;
            }else {
                num.insert(num.begin(), rem%10);
                if(rem == 10) rem = 1;
                else rem /= 10;
            }
            k /= 10;
        }
        if(rem)num.insert(num.begin(), rem);
        return num;
    }
};


104. Maximum Depth of Binary Tree

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxDepth(TreeNode* root) {
        if(!root) return 0;
        return 1 + max(maxDepth(root->left), maxDepth(root->right));
    }
};

783. Minimum Distance Between BST Nodes

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int res = INT_MAX, pre = -1;
    int minDiffInBST(TreeNode* root) {
       if (root->left != NULL) minDiffInBST(root->left);
        if (pre >= 0) res = min(res, root->val - pre);
        pre = root->val;
        if (root->right != NULL) minDiffInBST(root->right);
        return res;
     }

};



226. Invert Binary Tree

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        if(!root)return NULL;
        TreeNode *l = invertTree(root->left);
        TreeNode *r = invertTree(root->right);
        root->left = r;
        root->right = l;
        return root;
    }
};


103. Binary Tree Zigzag Level Order Traversal


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> ans;
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        if(!root)return ans;
        queue<TreeNode*> q;
        q.push(root);
        bool even = true;
        while(!q.empty()){
            vector<int> v;
            int n = q.size();
            for(int i = 0; i < n; i++){
                TreeNode *tmp = q.front(); q.pop();
                v.push_back(tmp->val);
                if(tmp->left)q.push(tmp->left);
                if(tmp->right)q.push(tmp->right);
            }
            if(!even)reverse(v.begin(), v.end());
            ans.push_back(v);
            even = !even;
        }
        return ans;
    }
};

35. Search Insert Position

class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int n = nums.size();
        int l = 0, r = n-1;
        while(l <= r){
            int mid = l + (r-l)/2;
            if(nums[mid] == target)return mid;
            else if(nums[mid] < target)l = mid+1;
            else r = mid-1;
        }
        return l;
    }
};





540. Single Element in a Sorted Array

class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int l = 0, r = nums.size()-2;
        while(l <= r){
            int mid = l + (r-l)/2;
            if(mid%2 == 0){
                if(nums[mid] != nums[mid+1]) r = mid-1;
                else l = mid+1;
            }else{
                if(nums[mid] == nums[mid+1]) r = mid-1;
                else l = mid+1;
            }
        }
        return nums[l];
    }
};


1011. Capacity To Ship Packages Within D Days

class Solution {
public:
    int shipWithinDays(vector<int>& weights, int days) {
        int r = accumulate(weights.begin(), weights.end(), 0);
        int l = max(r/days, *max_element(weights.begin(), weights.end()));
        while(l < r){
            int mid = l + (r-l)/2;
            if(possible(weights, days, mid)) r = mid;
            else l = mid+1;
        }
        return l;
    }
    bool possible(vector<int> weights, int days, int mid){
        int currsum = 0, ans = 1;
        for(auto w : weights){
            currsum += w;
            if(currsum > mid) ans++, currsum = w;
        }
        return ans <= days;
    }
};





502. IPO

class Solution {
public:
    int findMaximizedCapital(int k, int w, vector<int>& profits, vector<int>& capital) {
        int n = profits.size();
        vector<pair<int, int>> proj;
        for(int i = 0; i < n; i++) proj.emplace_back(capital[i], profits[i]);
        sort(proj.begin(), proj.end());
        priority_queue<int> pq;
        int ptr = 0;
        for(int i = 0; i < k; i++){
            while(ptr < n && proj[ptr].first <= w){
                pq.push(proj[ptr++].second);
            }
            if(pq.empty())break;
            w += pq.top(); pq.pop();
        }
        return w;
    }
};


1675. Minimize Deviation in Array

class Solution {
public:
    int minimumDeviation(vector<int>& nums) {
        priority_queue<int> pq; 
        int m = INT_MAX;
        for(int i=0;i<nums.size();i++){
            if(nums[i]%2==0){
                pq.push(nums[i]);
                m = min(m,nums[i]);
            }
            else{
                pq.push(nums[i]*2);
                m = min(m,nums[i]*2);
            }
        }
        int ans = INT_MAX;
        while(!pq.empty()){
            int top = pq.top();
            pq.pop();
            ans = min(ans,top-m);
            if(top%2!=0){
                break;
            }
            m = min(m,top/2);
            pq.push(top/2);
        }
        return ans;
    }
};


121. Best Time to Buy and Sell Stock

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        int ans = 0, mn = INT_MAX;
        for(int i = 0; i < n; i++){
            mn = min(mn, prices[i]);
            ans = max(ans, prices[i]-mn);
        }
        return ans;
    }
};



72. Edit Distance

class Solution {
public:
    int minDistance(string word1, string word2) {
        int n1 = word1.size(), n2 = word2.size();
        int dp[n1+1][n2+1];
        for(int i = 0; i <= n1; i++){
            for(int j = 0; j <= n2; j++){
                if(i == 0)dp[i][j] = j;
                else if(j == 0)dp[i][j] = i;
                else if(word1[i-1] == word2[j-1])dp[i][j] = dp[i-1][j-1];
                else dp[i][j] = 1 + min(dp[i-1][j-1], min(dp[i-1][j], dp[i][j-1]));
            }
        }
        return dp[n1][n2];
    }
};



/*
// Definition for a QuadTree node.
class Node {
public:
    bool val;
    bool isLeaf;
    Node* topLeft;
    Node* topRight;
    Node* bottomLeft;
    Node* bottomRight;
    
    Node() {
        val = false;
        isLeaf = false;
        topLeft = NULL;
        topRight = NULL;
        bottomLeft = NULL;
        bottomRight = NULL;
    }
    
    Node(bool _val, bool _isLeaf) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = NULL;
        topRight = NULL;
        bottomLeft = NULL;
        bottomRight = NULL;
    }
    
    Node(bool _val, bool _isLeaf, Node* _topLeft, Node* _topRight, Node* _bottomLeft, Node* _bottomRight) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = _topLeft;
        topRight = _topRight;
        bottomLeft = _bottomLeft;
        bottomRight = _bottomRight;
    }
};
*/




427. Construct Quad Tree

class Solution {
public:
    Node* construct(vector<vector<int>>& grid) {
        int n = grid.size();
        return rec(grid, 0, n-1, 0, n-1);
    }
    Node* rec(vector<vector<int>>&grid, int l, int r, int t, int b){
        if(l == r || t == b) return new Node(grid[t][l], true);
        Node *root = new Node(1, false);
        root->topLeft = rec(grid, l, (r+l)/2, t, (b+t)/2);
        root->topRight = rec(grid, (r+l)/2+1, r, t, (b+t)/2);
        root->bottomLeft = rec(grid, l, (r+l)/2, (b+t)/2+1, b);
        root->bottomRight = rec(grid, (r+l)/2+1, r, (b+t)/2+1, b);
        if(root->topLeft->val == root->topRight->val && 
           root->topLeft->val == root->bottomLeft->val &&
           root->topLeft->val == root->bottomRight->val &&
           root->topLeft->isLeaf && root->topRight->isLeaf &&
           root->bottomLeft->isLeaf && root->bottomRight->isLeaf)
           {
            return new Node(root->topLeft->val, true);
        }
        return root;
    }
};